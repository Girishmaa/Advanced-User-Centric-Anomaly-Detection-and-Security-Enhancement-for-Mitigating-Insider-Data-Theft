# -*- coding: utf-8 -*-
"""FILE TRANSFER

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BhhdCjRspTFfUpZRk8Fhi2Vt6RKlFik1
"""

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from sklearn.ensemble import IsolationForest
import pandas as pd

# Load your dataset
data = pd.read_csv("file.csv")

# Define threshold values
file_size_threshold = (150, 250)
access_frequency_threshold = (3, 8)

# Insert an anomaly into the dataset
anomaly_data = pd.DataFrame({
    'file_size': [200],  # Anomaly: Within the defined threshold
    'access_frequency': [10],  # Anomaly: Larger than the defined threshold
    'confidential': [1],  # Anomaly: Accessing a confidential file
    'file_name': ['Anomaly_File']  # Anomaly: File name for display in alert
})

# Append the anomaly to the original dataset
data_with_anomaly = data.append(anomaly_data, ignore_index=True)

# Prepare the data for anomaly detection
features = data_with_anomaly[["access_frequency"]]

# Initialize the Isolation Forest model
isolation_forest = IsolationForest(contamination=0.1, random_state=42)  # Adjust the contamination parameter as needed

# Fit the model to the data
isolation_forest.fit(features)

# Predict anomalies
predictions = isolation_forest.predict(features)

# Detect anomalies based on the access frequency threshold for confidential files
anomalies = (
    (data_with_anomaly["access_frequency"] < access_frequency_threshold[0]) |
    (data_with_anomaly["access_frequency"] > access_frequency_threshold[1]) &
    (data_with_anomaly["confidential"] == 1)  # Add condition for confidential files
)

# Display or take actions on detected anomalies
detected_anomalies = data_with_anomaly[anomalies]

# Generate an alert message and send an email if there are detected anomalies
if not detected_anomalies.empty:
    print("ALERT: Confidential file access detected!")

    # Sender and recipient email details
    sender_email = "girishmaa1204@gmail.com"
    recipient_email = "gvgirishmaa@gmail.com"
    email_password = "pfeh opuf inpv wklu"  # Replace with your email password

    # Update the HTML content in the email message
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Confidential File Access Alert</title>
    </head>
    <body>
        <h1>Suspicious Activity Detected</h1>
        <p>Anomaly detected in file: <strong>{file_name}</strong></p>
        <button id="interactionButton" onclick="allowAccess()">Allow</button>
        <button id="interactionButton" onclick="blockAccess()">Block</button>

        <script>
            function allowAccess() {{
                alert('Access allowed for {{{file_name}}}!');
            }}

            function blockAccess() {{
                alert('Access blocked for {{{file_name}}}!');
            }}
        </script>
    </body>
    </html>
    """.format(file_name=detected_anomalies["file_name"].iloc[0])  # Assuming only one anomaly is detected at a time

    # Create the email message
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = recipient_email
    message["Subject"] = "Confidential File Access Alert"

    # Attach the HTML content
    message.attach(MIMEText(html_content, "html"))

    # Connect to Gmail's SMTP server
    smtp_server = "smtp.gmail.com"
    smtp_port = 587

    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()

    # Login to your Gmail account
    server.login(sender_email, email_password)

    # Send the email
    server.sendmail(sender_email, recipient_email, message.as_string())

    # Quit the server
    server.quit()

    print("Email sent successfully.")